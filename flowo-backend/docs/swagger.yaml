basePath: /
definitions:
  dto.ProductCreate:
    description: Product creation request body
    properties:
      base_price:
        description: Base price of the product
        example: 29.99
        type: number
      description:
        description: Description of the product
        example: A beautiful bouquet of red roses, perfect for any occasion.
        type: string
      flower_type:
        description: Flower type of the product (e.g., Rose, Tulip, Lily)
        example: Rose
        type: string
      name:
        description: Name of the product
        example: Red Rose Bouquet
        type: string
      status:
        description: Status of the product (NewFlower, OldFlower, LowStock)
        enum:
        - NewFlower
        - OldFlower
        - LowStock
        example: NewFlower
        type: string
      stock_quantity:
        description: Stock quantity of the product
        example: 100
        type: integer
    required:
    - base_price
    - description
    - flower_type
    - name
    - status
    - stock_quantity
    type: object
  dto.TodoCreate:
    description: Todo creation request body
    properties:
      description:
        description: Detailed description of the todo item
        example: Write comprehensive documentation for the API endpoints
        type: string
      status:
        description: Current status of the todo item (pending, in-progress, completed)
        enum:
        - pending
        - in-progress
        - completed
        example: pending
        type: string
      title:
        description: Title of the todo item
        example: Complete project documentation
        type: string
    required:
    - title
    type: object
  model.FilterOptions:
    properties:
      flower_types:
        description: Available flower types
        items:
          $ref: '#/definitions/model.FlowerType'
        type: array
      occasions:
        description: Available occasions
        items:
          $ref: '#/definitions/model.Occasion'
        type: array
      price_range:
        allOf:
        - $ref: '#/definitions/model.PriceRange'
        description: Price range
    type: object
  model.FlowerType:
    properties:
      description:
        description: Description of the flower type
        example: Classic romantic flower
        type: string
      flower_type_id:
        description: Unique identifier of the flower type
        example: 1
        type: integer
      name:
        description: Name of the flower type
        example: Rose
        type: string
    type: object
  model.Occasion:
    properties:
      name:
        description: Name of the occasion
        example: Valentine's Day
        type: string
      occasion_id:
        description: Unique identifier of the occasion
        example: 1
        type: integer
    type: object
  model.PaginationInfo:
    properties:
      has_next:
        description: Whether there's a next page
        example: true
        type: boolean
      has_prev:
        description: Whether there's a previous page
        example: false
        type: boolean
      limit:
        description: Number of items per page
        example: 20
        type: integer
      page:
        description: Current page number
        example: 1
        type: integer
      total:
        description: Total number of items
        example: 150
        type: integer
      total_pages:
        description: Total number of pages
        example: 8
        type: integer
    type: object
  model.PriceRange:
    properties:
      max:
        description: Maximum price in the catalog
        example: 199.99
        type: number
      min:
        description: Minimum price in the catalog
        example: 5.99
        type: number
    type: object
  model.Product:
    properties:
      average_rating:
        description: Average rating from reviews
        example: 4.5
        type: number
      base_price:
        description: Base price of the product
        example: 29.99
        type: number
      created_at:
        description: Timestamp when the product was created
        example: "2024-03-15T08:00:00Z"
        type: string
      current_price:
        description: Current price (after applying dynamic pricing rules)
        example: 25.49
        type: number
      description:
        description: Description of the product
        example: A beautiful bouquet of red roses, perfect for any occasion.
        type: string
      flower_type:
        description: Flower type of the product (e.g., Rose, Tulip, Lily)
        example: Rose
        type: string
      images:
        description: Images associated with the product
        items:
          $ref: '#/definitions/model.ProductImage'
        type: array
      name:
        description: Name of the product
        example: Red Rose Bouquet
        type: string
      occasions:
        description: Occasions this product is suitable for
        items:
          type: string
        type: array
      product_id:
        description: Unique identifier of the product
        example: 1
        type: integer
      review_count:
        description: Total number of reviews
        example: 23
        type: integer
      sales_rank:
        description: Best-selling rank (for sorting)
        example: 1
        type: integer
      status:
        description: Status of the product (NewFlower, OldFlower, LowStock)
        enum:
        - NewFlower
        - OldFlower
        - LowStock
        example: NewFlower
        type: string
      stock_quantity:
        description: Stock quantity of the product
        example: 100
        type: integer
      updated_at:
        description: Timestamp when the product was last updated
        example: "2024-03-15T08:00:00Z"
        type: string
    type: object
  model.ProductImage:
    properties:
      alt_text:
        description: Alt text for accessibility
        example: Red Rose Bouquet
        type: string
      image_id:
        description: Unique identifier of the image
        example: 1
        type: integer
      image_url:
        description: URL of the image
        example: https://example.com/images/rose.jpg
        type: string
      is_primary:
        description: Whether this is the primary image
        example: true
        type: boolean
      product_id:
        description: Product ID this image belongs to
        example: 1
        type: integer
    type: object
  model.ProductSearchResponse:
    properties:
      filters:
        allOf:
        - $ref: '#/definitions/model.FilterOptions'
        description: Filter options available
      pagination:
        allOf:
        - $ref: '#/definitions/model.PaginationInfo'
        description: Pagination information
      products:
        description: List of products
        items:
          $ref: '#/definitions/model.Product'
        type: array
    type: object
  model.Response:
    properties:
      data: {}
      message:
        type: string
    type: object
  model.Todo:
    description: Todo represents a single todo item with its details
    properties:
      created_at:
        description: Timestamp when the todo was created
        example: "2024-03-15T08:00:00Z"
        type: string
      description:
        description: Detailed description of the todo item
        example: Write comprehensive documentation for the API endpoints
        type: string
      id:
        description: Unique identifier of the todo
        example: 1
        type: integer
      status:
        description: Current status of the todo item (pending, in-progress, completed)
        enum:
        - pending
        - in-progress
        - completed
        example: pending
        type: string
      title:
        description: Title of the todo item
        example: Complete project documentation
        type: string
      updated_at:
        description: Timestamp when the todo was last updated
        example: "2024-03-15T08:00:00Z"
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: support@example.com
    name: API Support Team
    url: http://www.example.com/support
  description: A modern RESTful API for managing your todos efficiently. This API
    provides comprehensive endpoints for creating, reading, updating, and deleting
    todo items.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Todo List API
  version: "1.0"
paths:
  /api/v1/flower-types:
    get:
      consumes:
      - application/json
      description: get all flower types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.FlowerType'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all flower types
      tags:
      - flower-types
  /api/v1/occasions:
    get:
      consumes:
      - application/json
      description: Get all available occasions for flower products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Occasion'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all occasions
      tags:
      - occasions
  /api/v1/product:
    post:
      consumes:
      - application/json
      description: create new product
      parameters:
      - description: Create product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Create a product
      tags:
      - products
  /api/v1/product/{id}:
    delete:
      consumes:
      - application/json
      description: delete product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: update product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Update a product
      tags:
      - products
  /api/v1/product/flower-type/{flower_type}:
    get:
      consumes:
      - application/json
      description: get products by flower type
      parameters:
      - description: Flower Type
        in: path
        name: flower_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Product'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get products by flower type
      tags:
      - products
  /api/v1/products:
    get:
      consumes:
      - application/json
      description: get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Product'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all products
      tags:
      - products
  /api/v1/products/{id}:
    get:
      consumes:
      - application/json
      description: Get comprehensive product details including images, occasions,
        ratings, and sales data
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get detailed product information
      tags:
      - products
  /api/v1/products/filters:
    get:
      consumes:
      - application/json
      description: Get all available filter options for product search including flower
        types, occasions, and price range
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.FilterOptions'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get available filter options
      tags:
      - products
  /api/v1/products/search:
    get:
      consumes:
      - application/json
      description: Search and filter products by multiple criteria with pagination
        and sorting
      parameters:
      - description: Search query for product name or description
        in: query
        name: query
        type: string
      - description: Filter by flower type
        in: query
        name: flower_type
        type: string
      - description: Filter by occasion
        in: query
        name: occasion
        type: string
      - description: Minimum price filter
        in: query
        name: price_min
        type: number
      - description: Maximum price filter
        in: query
        name: price_max
        type: number
      - description: Filter by product condition
        enum:
        - NewFlower
        - OldFlower
        - LowStock
        in: query
        name: condition
        type: string
      - description: Sort by option
        enum:
        - price_asc
        - price_desc
        - name_asc
        - name_desc
        - newest
        - best_selling
        in: query
        name: sort_by
        type: string
      - description: 'Page number (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.ProductSearchResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Search products with advanced filters
      tags:
      - products
  /api/v1/todos:
    get:
      consumes:
      - application/json
      description: get all todos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Todo'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: create new todo
      parameters:
      - description: Create todo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/dto.TodoCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Create a todo
      tags:
      - todos
  /api/v1/todos/{id}:
    delete:
      consumes:
      - application/json
      description: delete todo by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Delete a todo
      tags:
      - todos
    get:
      consumes:
      - application/json
      description: get todo by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get a todo
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: update todo by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update todo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/dto.TodoCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Update a todo
      tags:
      - todos
  /health:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Show the status of server.
      tags:
      - health
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: 'Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Operations about todos
  externalDocs:
    description: Detailed information about todo operations
    url: http://example.com/docs/todos
  name: todos
- description: API health check operations
  name: health
