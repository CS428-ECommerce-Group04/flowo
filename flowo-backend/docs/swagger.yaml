basePath: /
definitions:
  dto.AddToCartRequest:
    properties:
      product_id:
        type: integer
      quantity:
        minimum: 1
        type: integer
      user_id:
        type: integer
    required:
    - product_id
    - quantity
    - user_id
    type: object
  dto.CartItemResponse:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      product_id:
        type: integer
      quantity:
        type: integer
    type: object
  dto.CreateReviewRequest:
    properties:
      comment:
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: integer
      user_id:
        description: ProductID int    `json:"product_id" binding:"required"`
        type: integer
    required:
    - rating
    - user_id
    type: object
  dto.ProductCreate:
    description: Product creation request body
    properties:
      base_price:
        description: Base price of the product
        example: 29.99
        type: number
      description:
        description: Description of the product
        example: A beautiful bouquet of red roses, perfect for any occasion.
        type: string
      flower_type:
        description: Flower type of the product (e.g., Rose, Tulip, Lily)
        example: Rose
        type: string
      name:
        description: Name of the product
        example: Red Rose Bouquet
        type: string
      status:
        description: Status of the product (NewFlower, OldFlower, LowStock)
        enum:
        - NewFlower
        - OldFlower
        - LowStock
        example: NewFlower
        type: string
      stock_quantity:
        description: Stock quantity of the product
        example: 100
        type: integer
    required:
    - base_price
    - description
    - flower_type
    - name
    - status
    - stock_quantity
    type: object
  dto.RemoveCartItemRequest:
    properties:
      product_id:
        type: integer
      user_id:
        type: integer
    required:
    - product_id
    - user_id
    type: object
  dto.ReviewResponse:
    properties:
      comment:
        type: string
      product_id:
        type: integer
      rating:
        type: integer
      review_date:
        type: string
      review_id:
        type: integer
      user_id:
        type: integer
    type: object
  dto.TodoCreate:
    description: Todo creation request body
    properties:
      description:
        description: Detailed description of the todo item
        example: Write comprehensive documentation for the API endpoints
        type: string
      status:
        description: Current status of the todo item (pending, in-progress, completed)
        enum:
        - pending
        - in-progress
        - completed
        example: pending
        type: string
      title:
        description: Title of the todo item
        example: Complete project documentation
        type: string
    required:
    - title
    type: object
  dto.UpdateCartItemRequest:
    properties:
      product_id:
        type: integer
      quantity:
        minimum: 1
        type: integer
      user_id:
        type: integer
    required:
    - product_id
    - quantity
    - user_id
    type: object
  model.FlowerType:
    properties:
      flower_type_id:
        description: Unique identifier of the flower type
        example: 1
        type: integer
      name:
        description: Name of the flower type
        example: Rose
        type: string
    type: object
  model.Product:
    properties:
      base_price:
        description: Base price of the product
        example: 29.99
        type: number
      created_at:
        description: Timestamp when the product was created
        example: "2024-03-15T08:00:00Z"
        type: string
      description:
        description: Description of the product
        example: A beautiful bouquet of red roses, perfect for any occasion.
        type: string
      flower_type:
        description: Flower type of the product (e.g., Rose, Tulip, Lily)
        example: Rose
        type: string
      name:
        description: Name of the product
        example: Red Rose Bouquet
        type: string
      product_id:
        description: Unique identifier of the product
        example: 1
        type: integer
      status:
        description: Status of the product (NewFlower, OldFlower, LowStock)
        enum:
        - NewFlower
        - OldFlower
        - LowStock
        example: NewFlower
        type: string
      stock_quantity:
        description: Stock quantity of the product
        example: 100
        type: integer
      updated_at:
        description: Timestamp when the product was last updated
        example: "2024-03-15T08:00:00Z"
        type: string
    type: object
  model.Response:
    properties:
      data: {}
      message:
        type: string
    type: object
  model.Todo:
    description: Todo represents a single todo item with its details
    properties:
      created_at:
        description: Timestamp when the todo was created
        example: "2024-03-15T08:00:00Z"
        type: string
      description:
        description: Detailed description of the todo item
        example: Write comprehensive documentation for the API endpoints
        type: string
      id:
        description: Unique identifier of the todo
        example: 1
        type: integer
      status:
        description: Current status of the todo item (pending, in-progress, completed)
        enum:
        - pending
        - in-progress
        - completed
        example: pending
        type: string
      title:
        description: Title of the todo item
        example: Complete project documentation
        type: string
      updated_at:
        description: Timestamp when the todo was last updated
        example: "2024-03-15T08:00:00Z"
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: support@example.com
    name: API Support Team
    url: http://www.example.com/support
  description: A modern RESTful API for managing your todos efficiently. This API
    provides comprehensive endpoints for creating, reading, updating, and deleting
    todo items.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Todo List API
  version: "1.0"
paths:
  /api/v1/cart/{userID}:
    get:
      description: Retrieve all items in the cart for a given user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CartItemResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get cart items for user
      tags:
      - cart
  /api/v1/cart/add:
    post:
      consumes:
      - application/json
      description: Add a product with quantity to the user's cart. Stock will be updated
        accordingly.
      parameters:
      - description: Add to cart request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AddToCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Add product to cart
      tags:
      - cart
  /api/v1/cart/remove:
    delete:
      consumes:
      - application/json
      description: Remove a product from the user's cart
      parameters:
      - description: Remove cart item request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RemoveCartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Remove product from cart
      tags:
      - cart
  /api/v1/cart/update:
    put:
      consumes:
      - application/json
      description: Update the quantity of an existing cart item
      parameters:
      - description: Update cart item request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Update quantity of a product in cart
      tags:
      - cart
  /api/v1/flower-types:
    get:
      consumes:
      - application/json
      description: get all flower types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.FlowerType'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all flower types
      tags:
      - flower-types
  /api/v1/product:
    post:
      consumes:
      - application/json
      description: create new product
      parameters:
      - description: Create product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Create a product
      tags:
      - products
  /api/v1/product/{id}:
    delete:
      consumes:
      - application/json
      description: delete product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: get product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: update product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Update a product
      tags:
      - products
  /api/v1/product/flower-type/{flower_type}:
    get:
      consumes:
      - application/json
      description: get products by flower type
      parameters:
      - description: Flower Type
        in: path
        name: flower_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Product'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get products by flower type
      tags:
      - products
  /api/v1/products:
    get:
      consumes:
      - application/json
      description: get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Product'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all products
      tags:
      - products
  /api/v1/products/{productID}/reviews:
    get:
      description: Retrieve reviews by product ID
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ReviewResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all reviews for a product
      tags:
      - reviews
    post:
      consumes:
      - application/json
      description: Submit a review for a specific product
      parameters:
      - description: Product ID
        in: path
        name: productID
        required: true
        type: integer
      - description: Review body
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/dto.CreateReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Create review for a product
      tags:
      - reviews
  /api/v1/todos:
    get:
      consumes:
      - application/json
      description: get all todos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Todo'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: create new todo
      parameters:
      - description: Create todo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/dto.TodoCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Create a todo
      tags:
      - todos
  /api/v1/todos/{id}:
    delete:
      consumes:
      - application/json
      description: delete todo by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Delete a todo
      tags:
      - todos
    get:
      consumes:
      - application/json
      description: get todo by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get a todo
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: update todo by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update todo
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/dto.TodoCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Todo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Update a todo
      tags:
      - todos
  /health:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: Show the status of server.
      tags:
      - health
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: 'Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Operations about todos
  externalDocs:
    description: Detailed information about todo operations
    url: http://example.com/docs/todos
  name: todos
- description: API health check operations
  name: health
