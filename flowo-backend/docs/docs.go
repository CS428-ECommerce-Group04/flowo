// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support Team",
            "url": "http://www.example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/flower-types": {
            "get": {
                "description": "get all flower types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "flower-types"
                ],
                "summary": "Get all flower types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.FlowerType"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/occasions": {
            "get": {
                "description": "Get all available occasions for flower products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "occasions"
                ],
                "summary": "Get all occasions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Occasion"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/product": {
            "post": {
                "description": "create new product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Create a product",
                "parameters": [
                    {
                        "description": "Create product",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ProductCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Product"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/product/flower-type/{flower_type}": {
            "get": {
                "description": "get products by flower type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get products by flower type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Flower Type",
                        "name": "flower_type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Product"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/product/{id}": {
            "get": {
                "description": "get product by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Product"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "update product by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Update a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update product",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ProductCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete product by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Delete a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/products": {
            "get": {
                "description": "get all products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get all products",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Product"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/products/filters": {
            "get": {
                "description": "Get all available filter options for product search including flower types, occasions, and price range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get available filter options",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.FilterOptions"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/products/search": {
            "get": {
                "description": "Search and filter products by multiple criteria with pagination and sorting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Search products with advanced filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query for product name or description",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by flower type",
                        "name": "flower_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by occasion",
                        "name": "occasion",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum price filter",
                        "name": "price_min",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum price filter",
                        "name": "price_max",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "NewFlower",
                            "OldFlower",
                            "LowStock"
                        ],
                        "type": "string",
                        "description": "Filter by product condition",
                        "name": "condition",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "price_asc",
                            "price_desc",
                            "name_asc",
                            "name_desc",
                            "newest",
                            "best_selling"
                        ],
                        "type": "string",
                        "description": "Sort by option",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Items per page (default: 20, max: 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.ProductSearchResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/products/{id}": {
            "get": {
                "description": "Get comprehensive product details including images, occasions, ratings, and sales data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get detailed product information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Product"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/todos": {
            "get": {
                "description": "get all todos",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Get all todos",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Todo"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "create new todo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Create a todo",
                "parameters": [
                    {
                        "description": "Create todo",
                        "name": "todo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TodoCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Todo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/todos/{id}": {
            "get": {
                "description": "get todo by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Get a todo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Todo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Todo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "update todo by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Update a todo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Todo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update todo",
                        "name": "todo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TodoCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Todo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete todo by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "todos"
                ],
                "summary": "Delete a todo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Todo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "get the status of server.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Show the status of server.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ProductCreate": {
            "description": "Product creation request body",
            "type": "object",
            "required": [
                "base_price",
                "description",
                "flower_type",
                "name",
                "status",
                "stock_quantity"
            ],
            "properties": {
                "base_price": {
                    "description": "Base price of the product",
                    "type": "number",
                    "example": 29.99
                },
                "description": {
                    "description": "Description of the product",
                    "type": "string",
                    "example": "A beautiful bouquet of red roses, perfect for any occasion."
                },
                "flower_type": {
                    "description": "Flower type of the product (e.g., Rose, Tulip, Lily)",
                    "type": "string",
                    "example": "Rose"
                },
                "name": {
                    "description": "Name of the product",
                    "type": "string",
                    "example": "Red Rose Bouquet"
                },
                "status": {
                    "description": "Status of the product (NewFlower, OldFlower, LowStock)",
                    "type": "string",
                    "enum": [
                        "NewFlower",
                        "OldFlower",
                        "LowStock"
                    ],
                    "example": "NewFlower"
                },
                "stock_quantity": {
                    "description": "Stock quantity of the product",
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "dto.TodoCreate": {
            "description": "Todo creation request body",
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "description": {
                    "description": "Detailed description of the todo item",
                    "type": "string",
                    "example": "Write comprehensive documentation for the API endpoints"
                },
                "status": {
                    "description": "Current status of the todo item (pending, in-progress, completed)",
                    "type": "string",
                    "enum": [
                        "pending",
                        "in-progress",
                        "completed"
                    ],
                    "example": "pending"
                },
                "title": {
                    "description": "Title of the todo item",
                    "type": "string",
                    "example": "Complete project documentation"
                }
            }
        },
        "model.FilterOptions": {
            "type": "object",
            "properties": {
                "flower_types": {
                    "description": "Available flower types",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.FlowerType"
                    }
                },
                "occasions": {
                    "description": "Available occasions",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Occasion"
                    }
                },
                "price_range": {
                    "description": "Price range",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PriceRange"
                        }
                    ]
                }
            }
        },
        "model.FlowerType": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description of the flower type",
                    "type": "string",
                    "example": "Classic romantic flower"
                },
                "flower_type_id": {
                    "description": "Unique identifier of the flower type",
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "description": "Name of the flower type",
                    "type": "string",
                    "example": "Rose"
                }
            }
        },
        "model.Occasion": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the occasion",
                    "type": "string",
                    "example": "Valentine's Day"
                },
                "occasion_id": {
                    "description": "Unique identifier of the occasion",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "model.PaginationInfo": {
            "type": "object",
            "properties": {
                "has_next": {
                    "description": "Whether there's a next page",
                    "type": "boolean",
                    "example": true
                },
                "has_prev": {
                    "description": "Whether there's a previous page",
                    "type": "boolean",
                    "example": false
                },
                "limit": {
                    "description": "Number of items per page",
                    "type": "integer",
                    "example": 20
                },
                "page": {
                    "description": "Current page number",
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "description": "Total number of items",
                    "type": "integer",
                    "example": 150
                },
                "total_pages": {
                    "description": "Total number of pages",
                    "type": "integer",
                    "example": 8
                }
            }
        },
        "model.PriceRange": {
            "type": "object",
            "properties": {
                "max": {
                    "description": "Maximum price in the catalog",
                    "type": "number",
                    "example": 199.99
                },
                "min": {
                    "description": "Minimum price in the catalog",
                    "type": "number",
                    "example": 5.99
                }
            }
        },
        "model.Product": {
            "type": "object",
            "properties": {
                "average_rating": {
                    "description": "Average rating from reviews",
                    "type": "number",
                    "example": 4.5
                },
                "base_price": {
                    "description": "Base price of the product",
                    "type": "number",
                    "example": 29.99
                },
                "created_at": {
                    "description": "Timestamp when the product was created",
                    "type": "string",
                    "example": "2024-03-15T08:00:00Z"
                },
                "current_price": {
                    "description": "Current price (after applying dynamic pricing rules)",
                    "type": "number",
                    "example": 25.49
                },
                "description": {
                    "description": "Description of the product",
                    "type": "string",
                    "example": "A beautiful bouquet of red roses, perfect for any occasion."
                },
                "flower_type": {
                    "description": "Flower type of the product (e.g., Rose, Tulip, Lily)",
                    "type": "string",
                    "example": "Rose"
                },
                "images": {
                    "description": "Images associated with the product",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ProductImage"
                    }
                },
                "name": {
                    "description": "Name of the product",
                    "type": "string",
                    "example": "Red Rose Bouquet"
                },
                "occasions": {
                    "description": "Occasions this product is suitable for",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "product_id": {
                    "description": "Unique identifier of the product",
                    "type": "integer",
                    "example": 1
                },
                "review_count": {
                    "description": "Total number of reviews",
                    "type": "integer",
                    "example": 23
                },
                "sales_rank": {
                    "description": "Best-selling rank (for sorting)",
                    "type": "integer",
                    "example": 1
                },
                "status": {
                    "description": "Status of the product (NewFlower, OldFlower, LowStock)",
                    "type": "string",
                    "enum": [
                        "NewFlower",
                        "OldFlower",
                        "LowStock"
                    ],
                    "example": "NewFlower"
                },
                "stock_quantity": {
                    "description": "Stock quantity of the product",
                    "type": "integer",
                    "example": 100
                },
                "updated_at": {
                    "description": "Timestamp when the product was last updated",
                    "type": "string",
                    "example": "2024-03-15T08:00:00Z"
                }
            }
        },
        "model.ProductImage": {
            "type": "object",
            "properties": {
                "alt_text": {
                    "description": "Alt text for accessibility",
                    "type": "string",
                    "example": "Red Rose Bouquet"
                },
                "image_id": {
                    "description": "Unique identifier of the image",
                    "type": "integer",
                    "example": 1
                },
                "image_url": {
                    "description": "URL of the image",
                    "type": "string",
                    "example": "https://example.com/images/rose.jpg"
                },
                "is_primary": {
                    "description": "Whether this is the primary image",
                    "type": "boolean",
                    "example": true
                },
                "product_id": {
                    "description": "Product ID this image belongs to",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "model.ProductSearchResponse": {
            "type": "object",
            "properties": {
                "filters": {
                    "description": "Filter options available",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.FilterOptions"
                        }
                    ]
                },
                "pagination": {
                    "description": "Pagination information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PaginationInfo"
                        }
                    ]
                },
                "products": {
                    "description": "List of products",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Product"
                    }
                }
            }
        },
        "model.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Todo": {
            "description": "Todo represents a single todo item with its details",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the todo was created",
                    "type": "string",
                    "example": "2024-03-15T08:00:00Z"
                },
                "description": {
                    "description": "Detailed description of the todo item",
                    "type": "string",
                    "example": "Write comprehensive documentation for the API endpoints"
                },
                "id": {
                    "description": "Unique identifier of the todo",
                    "type": "integer",
                    "example": 1
                },
                "status": {
                    "description": "Current status of the todo item (pending, in-progress, completed)",
                    "type": "string",
                    "enum": [
                        "pending",
                        "in-progress",
                        "completed"
                    ],
                    "example": "pending"
                },
                "title": {
                    "description": "Title of the todo item",
                    "type": "string",
                    "example": "Complete project documentation"
                },
                "updated_at": {
                    "description": "Timestamp when the todo was last updated",
                    "type": "string",
                    "example": "2024-03-15T08:00:00Z"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Enter the token with the ` + "`" + `Bearer: ` + "`" + ` prefix, e.g. \"Bearer abcde12345\".",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Operations about todos",
            "name": "todos",
            "externalDocs": {
                "description": "Detailed information about todo operations",
                "url": "http://example.com/docs/todos"
            }
        },
        {
            "description": "API health check operations",
            "name": "health"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Todo List API",
	Description:      "A modern RESTful API for managing your todos efficiently. This API provides comprehensive endpoints for creating, reading, updating, and deleting todo items.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
